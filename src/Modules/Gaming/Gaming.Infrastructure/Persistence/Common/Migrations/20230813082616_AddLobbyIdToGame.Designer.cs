// <auto-generated />
using System;
using System.Collections.Generic;
using Gaming.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gaming.Infrastructure.Persistence.Common.Migrations
{
    [DbContext(typeof(GamingContext))]
    [Migration("20230813082616_AddLobbyIdToGame")]
    partial class AddLobbyIdToGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gaming.Domain.Games.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<List<int>>("Cells")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("cells")
                        .HasComment("Состояние игрового поля");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id")
                        .HasComment("Игра, к которой привязано данное поле");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_fields");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasDatabaseName("ix_fields_game_id");

                    b.ToTable("fields", "Game");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at")
                        .HasComment("Дата и время окончания игры");

                    b.Property<Guid>("FirstPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_player_id")
                        .HasComment("Первый игрок");

                    b.Property<Guid?>("LastMovePlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_move_player_id")
                        .HasComment("Игрок, сделавший последний ход");

                    b.Property<int>("Result")
                        .HasColumnType("integer")
                        .HasColumnName("result")
                        .HasComment("Результат игры");

                    b.Property<Guid>("SecondPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("second_player_id")
                        .HasComment("Второй игрок");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasComment("Дата и время начала игры");

                    b.Property<Guid>("StartedFromLobbyId")
                        .HasColumnType("uuid")
                        .HasColumnName("started_from_lobby_id")
                        .HasComment("Лобби, из которого игра была запущена");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.HasIndex("FirstPlayerId")
                        .HasDatabaseName("ix_games_first_player_id");

                    b.HasIndex("LastMovePlayerId")
                        .HasDatabaseName("ix_games_last_move_player_id");

                    b.HasIndex("SecondPlayerId")
                        .HasDatabaseName("ix_games_second_player_id");

                    b.HasIndex("StartedFromLobbyId")
                        .HasDatabaseName("ix_games_started_from_lobby_id");

                    b.ToTable("games", "Game");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.GameMove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id")
                        .HasComment("Игра");

                    b.Property<DateTimeOffset>("MovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moved_at")
                        .HasComment("Время хода");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id")
                        .HasComment("Игрок");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_moves");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_moves_game_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_moves_player_id");

                    b.ToTable("moves", "Game");
                });

            modelBuilder.Entity("Gaming.Domain.Lobbies.Entities.Lobby", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<Guid>("InitiatorPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiator_player_id")
                        .HasComment("Лидер лобби");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked")
                        .HasComment("Заблокировано ли лобби его лидером");

                    b.Property<Guid?>("JoinedPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("joined_player_id")
                        .HasComment("Присоединившийся игрок");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_lobbies");

                    b.HasIndex("InitiatorPlayerId")
                        .HasDatabaseName("ix_lobbies_initiator_player_id");

                    b.HasIndex("JoinedPlayerId")
                        .HasDatabaseName("ix_lobbies_joined_player_id");

                    b.ToTable("lobbies", "Lobby");
                });

            modelBuilder.Entity("Gaming.Domain.Players.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username")
                        .HasComment("Имя пользователя");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players", "Player");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.Field", b =>
                {
                    b.HasOne("Gaming.Domain.Games.Entities.Game", null)
                        .WithOne("Field")
                        .HasForeignKey("Gaming.Domain.Games.Entities.Field", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fields_games_game_id");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.Game", b =>
                {
                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_games_players_first_player_id");

                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("LastMovePlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_games_players_last_move_player_id");

                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_games_players_second_player_id");

                    b.HasOne("Gaming.Domain.Lobbies.Entities.Lobby", null)
                        .WithMany()
                        .HasForeignKey("StartedFromLobbyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_games_lobbies_started_from_lobby_id");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.GameMove", b =>
                {
                    b.HasOne("Gaming.Domain.Games.Entities.Game", null)
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moves_games_game_id");

                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moves_players_player_id");

                    b.OwnsOne("Gaming.Domain.Games.ValueObjects.FieldCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("GameMoveId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value1")
                                .HasColumnType("integer")
                                .HasColumnName("x")
                                .HasComment("X-координата хода");

                            b1.Property<int>("Value2")
                                .HasColumnType("integer")
                                .HasColumnName("y")
                                .HasComment("Y-координата хода");

                            b1.HasKey("GameMoveId");

                            b1.ToTable("moves", "Game");

                            b1.WithOwner()
                                .HasForeignKey("GameMoveId")
                                .HasConstraintName("fk_moves_moves_id");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();
                });

            modelBuilder.Entity("Gaming.Domain.Lobbies.Entities.Lobby", b =>
                {
                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("InitiatorPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobbies_players_initiator_player_id");

                    b.HasOne("Gaming.Domain.Players.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("JoinedPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lobbies_players_joined_player_id");
                });

            modelBuilder.Entity("Gaming.Domain.Games.Entities.Game", b =>
                {
                    b.Navigation("Field")
                        .IsRequired();

                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
